nrow(Wage)
ncol(Wage)
df[1:5,c(1:5,ncol(df))]
class(df)
df <- Wage
class(df)
df[1:5,c(1:5,ncol(df))]
names(df)
names(df)
str(df)
plot(df$education,df$wage)
plot(df$sex,df$wage)
plot(df$sex,df$wage)
head(df)
unique(df$sex)
head(df$sex)
df[df$sex=="2. Female",]
View(df)
head(cars)
names(cars)
plot(cars$speed,cars$dist)
df <- airquality
plot(df$Wind,df$Ozone)
str(airquality)
boxplot(Ozone~Month, airquality,xlab=
boxplot(Ozone~Month, airquality,xlab= "Month",ylab="Ozone ppb")
boxplot(Ozone~Month, airquality,xlab= "Month",ylab="Ozone ppb")
df <- airquality
df$Month <- as.factor(df$Month)
str(df)
head(iris)
df[df$Month==5]
df[df$Month==5]
df[df$Month==5,]
df[df$Month!=5,]
df[df$Month==5,]
head(mtcars)
library(ggplot2)
names(mtcars)
ggplot(mtcars,aes(x=wt,y=mpg))
ggplot(mtcars,aes(x=wt,y=mpg))+geom_point()
x <- ggplot(mtcars,aes(x=wt,y=mpg))
x <- x + geom_point()
x <- x+ theme_bw()
x
head(Wage)
str(Wage)
plot(Wage$education,Wage$wage)
plot(Wage$education,Wage$wage)
plot(cars$speed,cars$dist)
with(cars,plot(speed,dist))
str(airquality)
df <- airquality
str(df)
df$Month <- as.factor(df$Month)
str(df)
mayMonth <- airquality[airquality$Month==5,]
mayMonth
NotmayMonth <- airquality[airquality$Month!=5,]
ggplot(mtcars,aes(x=wt,y=mpg))
ggplot(mtcars,aes(x=wt,y=mpg))+geom_point()
p <- ggplot(mtcars,aes(x=wt,y=mpg))
p <- p + geom_point()
p
df <- iris
nrow(df)
dfs <- df[1:50,]
table(df$Species)
table(dfs$Species)
dfs1 <- df[1:10,]
dfs2 <- df[51:61,]
dfs3 <- df[101,111,]
dfs3 <- df[101:111,]
dfs1 <- rbind(dfs1,dfs2)
dfs1 <- rbind(dfs1,dfs3)
table(dfs1$Species)
library(dplyr)
?sample_frac
dfs <- sample_frac(df,.7)
nrow(dfs)
table(dfs$Species)
set.seed(999)
myNumbers <- seq(from=-1,to=1,by=.1)
squareVector <- function (x) {
return (x*x)
}
# call function
squaredX <- squareVector(myNumbers)
myNumbers
squaredX
plot(squaredX,type='b',xlab = 'x', ylab = 'x*x',frame=FALSE,col='blue')
plot(myNumbers,squaredX,type='b',xlab = 'x', ylab = 'x*x',frame=FALSE,col='blue')
multF <- function(x,y) {
return(x*y)
}
cat('5 x 7 = ',multF(5,7))
normalizeData <- function (x ) {
return ( (x-min(x) ) / ( max(x)- min(x) ))
}
df <- iris
df
head(df)
normalizeData <- function (x ) {
return ( (x-min(x) ) / ( max(x)- min(x) ))
}
for ( i in 1:ncol(df)-1){
df[,i] <- normalizeData(df[,i])
}
dfN <- as.data.frame(lapply(df[,-1], normalizeData) )
df <- iris
dfN <- as.data.frame(lapply(df[,-1], normalizeData) )
dfN <- as.data.frame(lapply(df[,-ncol(df)], normalizeData) )
dfN
?kmeans
classIndex <- ncol(df)
classIndex
kmeansClasses = rep(0,unique(df[,classIndex])
kmeansClasses = rep(0,unique(df[,classIndex]))
kmeansClasses = rep(0,unique(df[,classIndex]))
rep(0,3)
df <- iris
classIndex <- ncol(df)
classIndex <- ncol(df)
class(classIndex)
kmeansClasses = rep(0,unique(df[,classIndex]))
uniuqe(df[,5])
unique(df[,5])
unique(df[,classIndex])
kmeansClasses = rep(0,as.integer(unique(df[,classIndex])))
clustData <- function (df,ClassIndex,kmeansClasses = rep(0,unique(df[,ClassIndex]))) {
# use split function to split the dataset according to the class label
# a set of dataframes each representing a class label will be stored
# in dfs list()
dfs <- split (df, df[,ClassIndex])
#cat("splitted ", length(dfs),"\n")
clustList <- list()
n <- length(dfs)
for (i in 1:length(kmeansClasses)){
# Cluster according to all features excluding the label
if (kmeansClasses[i]>1 & kmeansClasses[i]< nrow(dfs[[i]])){
clustList[[i]] <- kmeans(dfs[[i]][,-ClassIndex],kmeansClasses[i])
#plotcluster(clustList[[i]], clustList[[i]]$cluster)
dfs[[i]]$cluster <- paste0((dfs[[i]][,ClassIndex]),
"_","c",clustList[[i]]$cluster)
}
else {
dfs[[i]]$cluster = paste0((dfs[[i]][,ClassIndex]),
"_c0")
}
}
# put all list elements in a dataframe and return it
# note that ldply() require the library plyr
allClusteredElements <- ldply (dfs, data.frame)
# drop the first column 'id' resulting from ldply
allClusteredElements <- allClusteredElements[,-1]
allClusteredElements <- allClusteredElements[,-ClassIndex]
return(allClusteredElements)
}
dfN <- clustData(df,5,c(2,2,2))
library(dplyr)
dfN <- clustData(df,5,c(2,2,2))
library(ldply)
library(dplyr)
library(plyr)
dfN <- clustData(df,5,c(2,2,2))
unique(df$Species)
unique(dfN$cluster)
dfN <- clustData(df,5,c(3,2,2))
unique(dfN$cluster)
dfN <- clustData(df,5,c(0,0,4))
unique(dfN$cluster)
dfv <- dfn[dfN$cluster=='virginica_c4',]
dfv <- dfN[dfN$cluster=='virginica_c4',]
dfv <- dfN[dfN$cluster=='virginica_c4',]
dfv
nrow(dfv)
head(dfv)
dfN
head(dfN)
df <- iris
clustData <- function (df,ClassIndex,kmeansClasses = rep(0,unique(df[,ClassIndex]))) {
# use split function to split the dataset according to the class label
# a set of dataframes each representing a class label will be stored
# in dfs list()
dfs <- split (df, df[,ClassIndex])
#cat("splitted ", length(dfs),"\n")
clustList <- list()
n <- length(dfs)
for (i in 1:length(kmeansClasses)){
# Cluster according to all features excluding the label
if (kmeansClasses[i]>1 & kmeansClasses[i]< nrow(dfs[[i]])){
clustList[[i]] <- kmeans(dfs[[i]][,-ClassIndex],kmeansClasses[i])
#plotcluster(clustList[[i]], clustList[[i]]$cluster)
dfs[[i]]$cluster <- paste0((dfs[[i]][,ClassIndex]),
"_","c",clustList[[i]]$cluster)
}
else {
dfs[[i]]$cluster = paste0((dfs[[i]][,ClassIndex]),
"_c0")
}
}
# put all list elements in a dataframe and return it
# note that ldply() require the library plyr
allClusteredElements <- ldply (dfs, data.frame)
# drop the first column 'id' resulting from ldply
allClusteredElements <- allClusteredElements[,-1]
allClusteredElements <- allClusteredElements[,-ClassIndex]
return(allClusteredElements)
}
library(plyr)
df <- iris
clustData <- function (df,ClassIndex,kmeansClasses = rep(0,unique(df[,ClassIndex]))) {
df <- iris
clustData <- function (df,ClassIndex,kmeansClasses = rep(0,unique(df[,ClassIndex]))) {
library(plyr)
# normalise data
dfN <- as.data.frame(lapply(df[,-ncol(df)], normalizeData) )
# add the label
dfN$Species <- df$Species
clusteredDF <- clustData(dfN,ncol(df), c(2,2,2))
setosats <- df[1:50,]
setosats
setsClusts <- df[1:50,]
setsClusts
library(MASS)
library(ISLR)
library(ISLR)
library(ggplot2)
p <- ggplot(Wage, aes(x = age, y = wage))
p <- p+ geom_point()
p <- p + stat_smooth(method = "lm", col = "red")
p <- p +xlab('Age')+ylab('Wage')
p
meanwage <- mean(Wage$wage)
cat('Average wage in Wage dataset is ', meanwage)
cat('Average wage in Wage dataset is $', meanwage)
mean(Wage[1,])
names(Wage)
observs <- c(27.4,29.4,30.0,30.0,30.5,31.2,31.8,32.0,32.6,33.0,34.7,35.9,
37.0,38.1,40.0,40.0,42.6,44.8,46.0,48.5)
meanO <- mean(observs)
maxO <- max(observs)
summary(observs)
quantile(observs)
length(observs)
observs <31.025
length(observs<31.025)
length(observs<31.025==TRUE)
length((observs<31.025)==TRUE)
quantile(observs)
plot(density(x.norm),main="Density estimate of data")
quantile(observs)
set.seed(82)
xDf = matrix(NA, ncol=4, nrow=10000)
i   = 1
while(i<10001){
x       = rnorm(2)
xDf[i,] = try(find.yz(x, xbar=0, s2=2), silent=TRUE)  # keeps the code from crashing
if(!is.nan(xDf[i,4])){ i = i+1 }                      # increments if worked
}
plot(xDf[,4])
xseq<-seq(-4,4,.01)
y<-2*xseq + rnorm(length(xseq),0,5.5)
hist(y, prob=TRUE, ylim=c(0,.06), breaks=20)
curve(dnorm(x, mean(y), sd(y)), add=TRUE, col="darkblue", lwd=2)
quantile(xseq)
y
quantile(y)
hist(xseq)
xseq <- randomdeviates<-rnorm(1000,0,1)
hist(xseq)
quantile(xseq)
names(df)
library(ggplot2)
head(diamonds)
library(RMOA)
getwd()
?write2pdf
library(arsenal)
install.packages("arsenal")
?write2pdf
write2pdf
?write2pdf
x = 1
y = 1
cat('This is my first R script', x+y)
x =
2
myVector = c(1,2,3,4)
55*70
df = iris
df <- iris
View(df)
head(df)
View(df)
unique(df$Species)
mySeq <- seq(1,10,by=.1)
mySeq
stIds <- c(1,2,3,4,5)
stNames<- c("St1","St2","St3","St4","St5")
stGrades<-c("Excellent","Good","Bad","Really Bad","Really Really Bad")
# create a data frame to combine the above vectors
df <- data.frame(student_id=stIds,student_name=stNames,student_grades=stGrades)
print(df,row.names = FALSE )
stIds <- c(1,2,3,4,5)
stNames<- c("St1","St2","St3","St4","St5")
stGrades<-c("Excellent","Good","Bad","Really Bad","Really Really Bad")
df <- data.frame(student_id=stIds,student_name=stNames,student_grades=stGrades,
stringsAsFactors = FALSE)
print(df,row.names = FALSE )
df$gpa <- NULL
# generate some numbers between 40 and 90 and add it to the gpa column
df$gpa <- runif(1:nrow(df),40,90)
# print data frame contents
print(df,row.names = FALSE )
dfBackup <- df
# correct students grades
df$student_grades <- ifelse(df$gpa>=80,"Excellent",
ifelse(df$gpa>=70,"Very Good",
ifelse(df$gpa>=50,"Good",
ifelse(df$gpa>=40,"Bad","Very Bad"))))
# print the original and modified data frame
print(df,row.names = FALSE )
print(dfBackup,row.names=FALSE)
dfBackup <- df
# correct students grades
df$student_grades <- ifelse(df$gpa>=80,"Excellent",
ifelse(df$gpa>=70,"Very Good",
ifelse(df$gpa>=50,"Good",
ifelse(df$gpa>=40,"Bad","Very Bad"))))
# print the original and modified data frame
print(dfBackup,row.names=FALSE)
newStudent <- c(6,"ST6","Good",55.5)
df <- rbind(df,newStudent)
df
newStudent <- c(6,"ST6","Good",55.5)
df <- rbind(df,newStudent)
df
newStudent <- c(6,"ST6","Good",55.5)
df <- rbind(df,newStudent)
df
newStudent <- c(7,"ST6","Good",55.5)
df <- rbind(df,newStudent)
df
stIds <- c(1,2,3,4,5)
stIds <- c(1,2,3,4,5)
stNames<- c("St1","St2","St3","St4","St5")
stGrades<-c("Excellent","Good","Bad","Really Bad","Really Really Bad")
df <- data.frame(student_id=stIds,student_name=stNames,student_grades=stGrades)
print(df,row.names = FALSE )
str(df)
str(df)
str(df)
df
df[,]
df[,1]
df[,c(1,3)]
df[,c(1,3)]
df[df$student_grades=="Good",]
df[df$student_grades=="Good",]
df
df <- iris
head(df)
tail(df)
head(df)
mean(df$Petal.Width)
max(df$Sepal.Length)
table(df$Species)
barplot(table(df$Species))
head(df)
x1 <- c(1:25)
x2 <- c(26:50)
x1 <- c(1:25)
x2 <- c(26:50)
x3 <- c(51:75)
x4 <- c(76:100)
x <- c(x1,x2,x3,x4)
quantile(x)
length(x<25.75)
x<25
length(x<25.75==TRUE)
length(x<25.75=TRUE)
(x<25.75=TRUE)
x1st <- x<26
x
x1st <- x<26==TRUE
x1st <- x<26=TRUE
1<3
x <- 1
cat ('x + y=',x+y)
x <- 1
y <- 1
cat ('x + y=',x+y)
for (i in 1:10) {
cat('i=',i,'\n')
}
countNums <- function(limit) {
for (i in 1:limit){
cat ('i is: ',i,'\n')
}
}
countNums(20)
x <- c(1:10); y<- c(1:10)
df <- data.frame(X=x,Y=y)
View(df)
df$Sum <- df$X+df$Y
df
df$Mul <- df$X*df$Y
View(df)
plot(df$X,df$Mul)
plot(df$X,df$Sum)
plot(df$X,df$Mul,type=n)
plot(df$X,df$Mul,type='n')
plot(df$X,df$Sum)
library(xtable)
print(xtable(df))
x <- seq(1,10,by=.1)
df <- iris
head(df)
df <- df[1:10,]
df
library(xtable)
print(xtable(df))
library(ISLR)
df <- Wage
View(df)
names(df)
names(df)
str(df)
unique(df$sex)
unique(df$jobclass)
barplot(table(df$education))
x = c(1:10)
y = c(1:10)
plot(x,y)
plot(x,y,type = 'b')
plot(x,y,type = 'b',frame=FALSE)
x
y
y = x*x
x
y
plot(x,y,type = 'b',frame=FALSE)
x = c(1:100)
x
y = x*x*x
y
plot(x,y,type='b',frame=FALSE)
plot(x,y,type='l',frame=FALSE)
for (i in 1:10){
cat(i,' Monia is a Good Girl\n')
}
for (i in 1:1000){
cat(i,' Monia is Deb\n')
}
for (i in 1:10000){
cat(i,' Monia is Deb\n')
}
for (i in 1:1000000){
cat(i,' Monia is Deb\n')
}
for (i in 1:1000000){
cat(i,' Daddy is Deb\n')
}
myNumbers <- seq(from=-1,to=1,by=.1)
# function definition
toPower <- function (x,p=2) {
if (p==2)
return (x*x)
else if (p==3)
return (x*x*x)
return (x*x)
}
plot(myNumbers,cubes,type='b',xlab = 'x', ylab = 'x*x',frame=FALSE,col='blue')
myNumbers <- seq(from=-1,to=1,by=.1)
plot(myNumbers,cubes,type='b',xlab = 'x', ylab = 'x*x',frame=FALSE,col='blue')
squared <- toPower(myNumbers)
cubes <- toPower(myNumbers,3)
plot(myNumbers,cubes,type='b',xlab = 'x', ylab = 'x*x',frame=FALSE,col='blue')
plot(myNumbers,squared,type='b',xlab = 'x', ylab = 'x*x',frame=FALSE,col='blue')
setwd("~/Dropbox/github/symbols/data")
df <- read.csv('metrics_csv.csv')
list.files()
df <- read.csv('metrics_csv.csv')
library(xtable(df))
library(xtable)
print(xtable(df),include.rownames = FALSE)
print(xtable(df),include.rownames = FALSE)
df
names(Df)
names(df)
df = df[order(df$precision),]
print(xtable(df),include.rownames = FALSE)
df = read.csv('classDist.txt')
df
names(df)
df = read.csv('classDist.txt',header = FALSE)
names(df) <- c('Symbol','Frequency')
names(df)
df = read.csv('classDist.txt',,sep='\t',header = FALSE)
names(df) <- c('Symbol','Frequency')
df = read.csv('classDist.csv')
print(xtable(df))
print(xtable(df),include.rownames = FALSE)
df <- read.csv('metrics_csv.csv')
library(xtable)
df = df[order(df$precision),]
print(xtable(df),include.rownames = FALSE)
View(df)
df = df[order(df$recall),]
print(xtable(df),include.rownames = FALSE)
View(df)
